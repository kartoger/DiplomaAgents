#include <iostream>
#include <fstream>
#include <sstream>
#include <unordered_map>
#include <vector>
#include <ctime>
#include <arpa/inet.h>
#include <unistd.h>

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º IP –∏–∑ hex –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
std::string hexToIp(const std::string& hex) {
    unsigned int ip;
    std::stringstream ss;
    ss << std::hex << hex;
    ss >> ip;
    ip = ntohl(ip);

    struct in_addr addr;
    addr.s_addr = ip;
    return std::string(inet_ntoa(addr));
}

// –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
void scanConnections(std::unordered_map<std::string, std::vector<int>>& ipPorts) {
    std::ifstream tcpFile("/proc/net/tcp");
    std::string line;
    getline(tcpFile, line); // –∑–∞–≥–æ–ª–æ–≤–æ–∫

    while (getline(tcpFile, line)) {
        std::istringstream iss(line);
        std::string sl, localAddr, remoteAddr, state;
        iss >> sl >> localAddr >> remoteAddr >> state;

        if (state != "01") continue; // —Ç–æ–ª—å–∫–æ ESTABLISHED

        std::string remoteIPHex = remoteAddr.substr(0, remoteAddr.find(":"));
        std::string remotePortHex = remoteAddr.substr(remoteAddr.find(":") + 1);

        int port;
        std::stringstream ss;
        ss << std::hex << remotePortHex;
        ss >> port;

        std::string ipStr = hexToIp(remoteIPHex);
        ipPorts[ipStr].push_back(port);
    }
}

void detectPortScanning(const std::unordered_map<std::string, std::vector<int>>& ipPorts) {
    for (const auto& entry : ipPorts) {
        const std::string& ip = entry.first;
        const std::vector<int>& ports = entry.second;

        if (ports.size() >= 10) { // –µ—Å–ª–∏ IP –ª–µ–∑–µ—Ç –∫ >10 –ø–æ—Ä—Ç–∞–º
            std::cout << "–í–æ–∑–º–æ–∂–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –æ—Ç IP: " << ip
                      << " (–ø–æ–ø—ã—Ç–∫–∏ –∫ " << ports.size() << " –ø–æ—Ä—Ç–∞–º)" << std::endl;
        }
    }
}

int main() {
    std::cout << "üõ° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è..." << std::endl;

    while (true) {
        std::unordered_map<std::string, std::vector<int>> ipPorts;
        scanConnections(ipPorts);
        detectPortScanning(ipPorts);
        sleep(3); // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
    }

    return 0;
}
